#!/bin/bash
#-- NOT A REAL SHELL SCRIPT!   This is a cut'n'paste scriptlet!
#   Be sure to read & understand what you're cutting & pasting!
#------------------------------------------------------------------------------
# name:    Ansible Notes (ansibleNotes)
# author:  awmyhr@gmail.com
# revised: 20180907-151338
# created: 2016-??-??
#------------------------------------------------------------------------------
#-- Configuration Locations - first found
#------------------------------------------------------------------------------
#-- Contents of ${ANSIBLE_CONFIG}
#   ./ansible.cfg
#   ~/.ansible.cfg
#   /etc/ansible/ansible.cfg
#------------------------------------------------------------------------------
#-- Common flags
#------------------------------------------------------------------------------
#   -o            print each result on one line
#   -k            ask for password (i.e., don't use key-based)
#   -b, --become  run operation using sudo (default, see become-method) (also -s, --sudo [deprecated])
#   -C, --check   don't make changes, test what would be changed
#   -f <num>      run <num> parallel processes (default 5)
#   -u <user>     log into servers as <user>
#   -B <num>      run in background, kill task after <num> seconds
#   -t <dir>      save contents in this output <dir>, results in file named for each host
#   --become-method=BECOME_METHOD
#                 Privilege escalation method to use (default=sudo), valid choices:
#                   [ sudo | su | pbrun | pfexec | runas | doas | dzdo ]
#   --list-hosts  outputs a list of matching hosts; does not execute anything
#   --list-hosts  outputs a list of matching hosts; does not execute anything
#------------------------------------------------------------------------------
#-- Ad-hoc commands
#------------------------------------------------------------------------------
#-- Test connection to all inventory hosts
ansible all -m ping
#-- Execute arbitrary commands (no '-m ${MODULE_NAME}' implies '-m command')
ansible "${HOST_FILTER}" -a "${COMMAND}"
#-- Execute arbitrary commands in a shell environment
ansible "${HOST_FILTER}" -m shell  -a "${COMMAND}"
#-- Get all facts from hosts
ansible "${HOST_FILTER}" -m setup
#-- Get specific facts from hosts
ansible "${HOST_FILTER}" -m setup  -a "filter=${KEY_PATTERN}"
#-- Copy file *to* hosts
ansible "${HOST_FILTER}" -m copy   -a "src=${SRC_FILE} dest=${TGT_FILE} mode=${FILE_MODE:-0644}"
#-- Copy file *from* hosts
ansible "${HOST_FILTER}" -m fetch  -a "src=${SRC_FILE} dest=${TGT_FILE}"
# install/remove a package via yum as root
ansible "${HOST_FILTER}" -b -m yum -a "name=${PKG_NAME} state=${PKG_STATE:-present}"
#------------------------------------------------------------------------------
#-- Ansible Playbook stuff
#------------------------------------------------------------------------------
# Syntax check
ansible-playbook --syntax-check "${PLAYBOOK}"
# List of tasks that would be executed
ansible-playbook --list-tasks "${PLAYBOOK}"
# Run on all hosts defined
#   test run add -C
#   dry run add -C -D
#   single host add -l <hostname>
ansible-playbook "${PLAYBOOK}"
#------------------------------------------------------------------------------
#-- Ansible Galaxy stuff
#------------------------------------------------------------------------------
#-- Add stuff
ansible-galaxy
#------------------------------------------------------------------------------
#-- Ansible Vault stuff
#------------------------------------------------------------------------------
#-- Basic file encryption
#   When running a command w/Vault encrypted files, add flag '--ask-vault-pass'
ansible-vault encrypt "${FILE}"
#------------------------------------------------------------------------------
#-- Misc Commands
#------------------------------------------------------------------------------
#-- Show documentation on modules (-M optional if docs in standard location)
ansible-doc -M "${PATH_TO_MODULES}" "${MODULE_NAME}"
#-- Pull commands [pull playbooks from VCS server and run them using this machine as the target.]
ansible-pull
#------------------------------------------------------------------------------
#-- AWX install/setup (okd/OpenShift)
#   Currently this assumes one is running on an okd master node or system
#   w/minishift, and are using the official hosted images
#------------------------------------------------------------------------------
#-- Ansible based installer for awx
AWXDIR="${TMPDIR:-/tmp}"/awx
AWXUSER='awx-admin'
AWXPASS='tower'
rm -Rf "${AWXDIR}" /tmp/awx-config
git clone https://github.com/ansible/awx.git "${AWXDIR}"
#-- if one wants a specific version. You'll also need to
#   set 'dockerhub_version' in awx-hosts
# AWXREL='1.0.7'
# cd "${AWXDIR}" \
#     && git fetch --all --tags --prune \
#     && git checkout tags/"${AWXREL}" \
#     && cd - || return
cp "${AWXDIR}"/installer/inventory awx-hosts

#-- Create user for the awx project, this is for htpasswd backed authentication:
htpasswd -b /etc/origin/master/htpasswd "${AWXUSER}" "${AWXPASS}"
#-- Switch to the user (to create okd objects), then back
oc login "$(hostname -f)":8443 -u "${AWXUSER}" -p "${AWXPASS}"
oc login -u system:admin

#-- I had to grant cluster-admin privvies to the user
oc adm policy add-cluster-role-to-user cluster-admin "${AWXUSER}"

#-- Customize awx-hosts
#   Here are some vars I've used
# [all:vars]
# default_admin_user=awx-admin
# default_admin_password=tower
# pg_password=tower
# openshift_host=127.0.0.1:8443
# openshift_project=awx-proj
# openshift_user=awx-admin
# #-- Only set this to true if okd has self-signed certs
# openshift_skip_tls_verify=True
# #-- Only set this to true for demo/temp; However, if set to 'False',
# #   one *must* have a PVC in the project named 'postgresql' of at least 10G
# openshift_pg_emptydir=True

ansible-playbook -i awx-hosts "${AWXDIR}"/installer/install.yml -e openshift_password="${AWXPASS}"

